<?php

namespace NovaFrame\Console\Commands;

use NovaFrame\Console\Command;
use NovaFrame\Helpers\FileSystem\FileSystem;

class ConfigCache extends Command
{
    /**
     * The name of the console command.
     *
     * @var string
     */
    protected string $name = 'config:cache';

    /**
     * The description of the console command.
     *
     * @var string
     */
    protected string $description = 'Cache the configuration files';

    /**
     * An array of command arguments.
     * Each argument is defined by an associative array with keys:
     * - 'name': The name of the argument.
     * - 'description': The description of the argument.
     * - 'mode': Argument mode
     * - Example : $arguments = [
     *                  [
     *                      'name'        => 'argName',
     *                      'description' => 'argDescription',
     *                      'mode'        => InputArgument::REQUIRED
     *                  ],
     *              ];
     *
     * @var array
     */
    protected array $arguments = [];

    /**
     * An array of command options.
     * Each option is defined by an associative array with keys:
     * - 'name': The name of the option.
     * - 'shortcut': The shortcut for the option.
     * - 'mode': Option mode
     * - 'description': The description of the option.
     * - 'default': default value
     * - Example : $arguments = [
     *                  [
     *                      'name'        => 'optionName',
     *                      'short'       => 's',
     *                      'mode'        => InputOption::VALUE_REQUIRED,
     *                      'description' => 'optionDescription',
     *                      'default'     => false
     *                  ],
     *              ];
     *
     * @var array
     */
    protected array $options = [];

    /**
     * Usage for command
     * - Example : $usage = 'command:name [argument] [option]'
     *
     * @var string
     */
    protected string $usage = 'config:cache';

    private string $cacheFile = DIR_BOOTSTRAP . 'cache' . DS . 'config.php';

    public function handle()
    {
        if (file_exists($this->cacheFile)) {
            $this->io->box('Warning', 'white', 'yellow', newline: true);
            $this->io->warning(" {$this->cacheFile} is already exists.", true, ' âš ');
            $this->io->newLine();

            if (!$this->io->confirm('All content will be overwritten, Do you want to continue?', false)) {
                return self::FAILURE;
            }
        }

        FileSystem::mkdir(pathinfo($this->cacheFile, PATHINFO_DIRNAME));

        $files = glob(DIR_CONFIG . '*.php');

        $files = array_filter($files, fn ($file) => basename($file) !== 'event.php');

        $cache = [];

        foreach ($files as $file) {
            $cache[pathinfo($file, PATHINFO_FILENAME)] = require $file;
        }

        $content = "<?php\n\n// This file was auto-generated by NovaFrame\n// Do NOT edit this file manually\n\nreturn " . var_export($cache,true) . ";\n";

        if (FileSystem::fwrite($this->cacheFile,$content, true)) {
            $this->io->box('Success', 'white', 'green', ['bold'], true);
            $this->io->success(' config cached successfully at ' . $this->cacheFile, emoji: " âœ“");
            $this->io->newLine();

            return self::SUCCESS;
        } else {
            $this->io->box('Error', 'white', 'red', ['bold']);
            $this->io->error(' Failed to cache config.', emoji: ' ðŸž©');
            $this->io->newLine();

            return self::FAILURE;
        }
    }
}
