<?php

namespace NovaFrame\Console\Commands;

use NovaFrame\Console\Command;
use NovaFrame\Encryption\Encryption;
use NovaFrame\Helpers\FileSystem\FileSystem;
use NovaFrame\Route\RouteCollection;
use Symfony\Component\Console\Input\InputOption;

class RouteCache extends Command
{
    /**
     * The name of the console command.
     *
     * @var string
     */
    protected string $name = 'route:cache';

    /**
     * The description of the console command.
     *
     * @var string
     */
    protected string $description = 'Cache the routes';

    /**
     * An array of command arguments.
     * Each argument is defined by an associative array with keys:
     * - 'name': The name of the argument.
     * - 'description': The description of the argument.
     * - 'mode': Argument mode
     * - Example : $arguments = [
     *                  [
     *                      'name'        => 'argName',
     *                      'description' => 'argDescription',
     *                      'mode'        => InputArgument::REQUIRED
     *                  ],
     *              ];
     *
     * @var array
     */
    protected array $arguments = [];

    /**
     * An array of command options.
     * Each option is defined by an associative array with keys:
     * - 'name': The name of the option.
     * - 'shortcut': The shortcut for the option.
     * - 'mode': Option mode
     * - 'description': The description of the option.
     * - 'default': default value
     * - Example : $arguments = [
     *                  [
     *                      'name'        => 'optionName',
     *                      'short'       => 's',
     *                      'mode'        => InputOption::VALUE_REQUIRED,
     *                      'description' => 'optionDescription',
     *                      'default'     => false
     *                  ],
     *              ];
     *
     * @var array
     */
    protected array $options = [
        [
            'name'        => 'force',
            'short'       => 'f',
            'mode'        => InputOption::VALUE_NONE,
            'description' => 'Force overwrite the route cache without confirmation.',
        ]
    ];

    /**
     * Usage for command
     * - Example : $usage = 'command:name [argument] [option]'
     *
     * @var string
     */
    protected string $usage = 'route:cache';

    private string $cacheFile = DIR_BOOTSTRAP . 'cache' . DS . 'route.php';

    public function handle()
    {
        if (file_exists($this->cacheFile) && !$this->input->getOption('force')) {
            $this->io->box('Warning', 'white', 'yellow', newline: true);
            $this->io->warning(" {$this->cacheFile} is already exists.", true, ' âš ');
            $this->io->newLine();

            if (!$this->io->confirm('All content will be overwritten, Do you want to continue?', false)) {
                return self::FAILURE;
            }
        }

        require DIR_APP . 'Routes' . DS . 'app.php';

        /**
         * @var $collection RouteCollection
         */
        $collection = app('routes');

        FileSystem::mkdir(pathinfo($this->cacheFile, PATHINFO_DIRNAME));

        $routes = $collection->all();

        foreach ($routes['routes']['list'] as $method => $route) {
            foreach ($route as $k => $items) {
                if ($items['action'] instanceof \Closure) {
                    $items['action'] = 'serialized:' . Encryption::encrypt(\Opis\Closure\serialize($items['action']));
                    $routes['routes']['list'][$method][$k] = $items;
                }
            }
        }

        $content = "<?php\n\n// This file was auto-generated by NovaFrame\n// Do NOT edit this file manually\n\nreturn " . var_export($routes, true) . ";\n";

        if (FileSystem::fwrite($this->cacheFile, $content, true)) {
            $this->io->box('Success', 'white', 'green', ['bold'], true);
            $this->io->success(' routes cached successfully at ' . $this->cacheFile, emoji: " âœ“");
            $this->io->newLine();

            return self::SUCCESS;
        } else {
            $this->io->box('Error', 'white', 'red', ['bold']);
            $this->io->error(' Failed to cache routes.', emoji: ' ðŸž©');
            $this->io->newLine();

            return self::FAILURE;
        }
    }
}
